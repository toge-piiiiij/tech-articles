{"version":3,"sources":["articles/angular/mds/index.js","articles/angular/index.js","articles/git/index.js","App.js","serviceWorker.js","index.js","articles/angular/mds/angular-first.md","articles/angular/mds/angular-second.md"],"names":["articles","title","component","AngularFirst","path","AngularSecond","AngularArticles","useState","md","setMd","className","Articles","map","a","onClick","fetch","then","res","text","size","to","Button","variant","color","key","source","Git","App","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0NAUeA,EALE,CACb,CAAEC,MAAO,wCAAgBC,UAAWC,IAAcC,KAAM,iBACxD,CAAEH,MAAO,wCAAgBC,UAAWG,IAAeD,KAAM,mB,yCC6B9CE,MA9Bf,WAA4B,IAAD,EACLC,mBAAS,IADJ,mBAClBC,EADkB,KACdC,EADc,KAOzB,OACE,oCACE,yBAAKC,UAAU,iBACZC,EAAiBC,KAAI,SAAAC,GAAC,OACrB,kBAAC,IAAD,CACEC,QAAS,kBATSZ,EASiBW,EAAEX,eAR7Ca,MAAMb,GAAWc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIT,EAAMS,MADlC,IAAAhB,GAUlBiB,KAAK,QACLC,GAAE,mBAAcP,EAAET,OAClB,kBAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,QAAQI,MAAM,WAAWV,EAAEZ,YAIlE,kBAAC,IAAD,KACGU,EAAiBC,KAAI,SAAAC,GAAC,OACrB,kBAAC,IAAD,CAAOW,IAAG,WAAMX,EAAET,MAAQA,KAAI,mBAAcS,EAAET,OAC5C,kBAAC,IAAD,CAAeqB,OAAQjB,WChBpBkB,MAVf,WAGE,OACE,yBAAKhB,UAAU,YAAf,gBCyBWiB,MAxBf,WACE,OACE,yBAAKjB,UAAU,iBACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAASU,GAAG,WAAWQ,gBAAgB,oBACrC,kBAACP,EAAA,EAAD,CAAQF,KAAK,SAAb,YAEF,kBAAC,IAAD,CAASC,GAAG,OAAOQ,gBAAgB,oBACjC,kBAACP,EAAA,EAAD,CAAQF,KAAK,SAAb,SAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOf,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,UCZUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,kBACvB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,sBDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.c83d99ca.chunk.js","sourcesContent":["import AngularFirst from \"./angular-first.md\";\nimport AngularSecond from \"./angular-second.md\";\n\n\n\nconst articles = [\n    { title: 'Angular第一篇文章', component: AngularFirst, path: 'angular-first' },\n    { title: 'Angular第二篇文章', component: AngularSecond, path: 'angular-second' },\n]\n\nexport default articles","import React, { useState, useCallback } from 'react'\nimport * as Articles from \"./mds\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\nimport ReactMarkdown from 'react-markdown'\n\nfunction AngularArticles() {\n  const [md, setMd] = useState('')\n\n  const handleSelectArticle = component => {\n    fetch(component).then(res => res.text()).then(text => setMd(text))\n  }\n\n  return (\n    <>\n      <div className=\"category-list\">\n        {Articles.default.map(a =>\n          <Link\n            onClick={() => handleSelectArticle(a.component)}\n            size=\"large\"\n            to={`/angular/${a.path}`}>\n            <Button variant=\"contained\" size=\"large\" color=\"primary\">{a.title}</Button>\n          </Link>)}\n      </div>\n\n      <Switch>\n        {Articles.default.map(a =>\n          <Route key={`/${a.path}`} path={`/angular/${a.path}`}>\n            <ReactMarkdown source={md} />\n          </Route>\n        )}\n      </Switch>\n    </>\n  );\n}\n\nexport default AngularArticles;","import React from 'react';\n\nfunction Git() {\n  // TODO: for-loop rendering\n  // 用<Route> 去Render\n  return (\n    <div className=\"root-git\">\n     Here is git\n    </div>\n  );\n}\n\nexport default Git;\n","import React from 'react';\nimport './App.css';\nimport Angular from './articles/angular'\nimport Git from './articles/git'\nimport { Switch, Route, Link, NavLink } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\n\nfunction App() {\n  return (\n    <div className=\"tech-articles\">\n      <div className=\"article-category\">\n        <NavLink to=\"/angular\" activeClassName=\"current-category\">\n          <Button size=\"large\">Angular</Button>\n        </NavLink>\n        <NavLink to=\"/git\" activeClassName=\"current-category\">\n          <Button size=\"large\">Git</Button>\n        </NavLink>\n      </div>\n\n      <Switch>\n        <Route path=\"/angular\">\n          <Angular />\n        </Route>\n        <Route path=\"/git\">\n          <Git />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('tech-article-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/angular-first.fd6bdf41.md\";","module.exports = __webpack_public_path__ + \"static/media/angular-second.d9714c69.md\";"],"sourceRoot":""}