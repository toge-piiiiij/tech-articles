{"version":3,"sources":["articles/randomly-murmur/mds/index.js","articles/randomly-murmur/index.js","articles/git/posts/delete-tag.js","articles/git/posts/index.js","articles/git/posts/create-tag.js","articles/git/index.js","App.js","serviceWorker.js","index.js","articles/randomly-murmur/mds/murmur1.md","articles/randomly-murmur/mds/murmur2.md","articles/randomly-murmur/mds/murmur3.md"],"names":["component","RandomlyMurmur1","RandomlyMurmur2","RandomlyMurmur3","emojiSupport","text","value","replace","name","emoji","getUnicode","AngularArticles","useState","md","setMd","className","Button","variant","size","color","onClick","post","posts","Math","floor","random","length","fetch","then","res","source","renderers","DeleteTag","id","file","title","path","Gits","Post","setPost","Posts","map","a","c","key","to","App","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4SAIe,GACX,CAAEA,UAAWC,KACb,CAAED,UAAWE,KACb,CAAEF,UAAWG,MCAXC,G,OAAe,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,QAAQ,WAAW,SAAAC,GAAI,OAAIC,IAAMC,WAAWF,QA4BrEG,MA1Bf,WAA4B,IAAD,EACLC,mBAAS,IADJ,mBAClBC,EADkB,KACdC,EADc,KASzB,OACE,oCACE,yBAAKC,UAAU,mBACb,kBAACC,EAAA,EAAD,CACED,UAAU,iBACVE,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,QAfoB,WAC1B,IAAMC,EAAOC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,EAAMI,UAC/DC,MAAMN,EAAKrB,WAAW4B,MAAK,SAAAC,GAAG,OAAIA,EAAIxB,UAAQuB,MAAK,SAAAvB,GACjDS,EAAMT,QAOJ,+BAQA,kBAAC,IAAD,CAAeyB,OAAQjB,EAAIkB,UAAW,CAAE1B,KAAMD,Q,QCpBvC4B,ICNA,GACX,CAAEhC,UDDN,WACI,OACI,kBAAC,IAAD,CAAMiC,GAAG,mCAAmCC,KAAK,gBCD7BC,MAAO,aAAcC,KAAM,cACnD,CAAEpC,UCFN,WACI,OACI,kBAAC,IAAD,CAAMiC,GAAG,mCAAmCC,KAAK,gBDA7BC,MAAO,aAAcC,KAAM,e,QE+BxCC,MA/Bf,WAAiB,IAAD,EACUzB,mBAAS,MADnB,mBACP0B,EADO,KACDC,EADC,KAMd,OACE,oCACE,yBAAKxB,UAAU,aACZyB,EAAcC,KAAI,SAAAC,GAAC,OAClB,kBAAC,IAAD,CACEtB,QAAS,kBAROuB,EAQgBD,EAAE1C,eAP1CuC,EAAQI,KADe,IAACA,GAShBC,IAAKF,EAAEN,KACPS,GAAE,eAAUH,EAAEN,OACd,kBAACpB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,QAAQC,MAAM,WAAWuB,EAAEP,YAIjEG,I,OCQQQ,MAxBf,WACE,OACE,yBAAK/B,UAAU,iBACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAS8B,GAAG,kBAAkBE,gBAAgB,oBAC5C,kBAAC/B,EAAA,EAAD,CAAQE,KAAK,SAAb,oBAEF,kBAAC,IAAD,CAAS2B,GAAG,OAAOE,gBAAgB,oBACjC,kBAAC/B,EAAA,EAAD,CAAQE,KAAK,SAAb,SAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,UCZUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,kBACvB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,sBDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.0731700a.chunk.js","sourcesContent":["import RandomlyMurmur1 from \"./murmur1.md\";\nimport RandomlyMurmur2 from \"./murmur2.md\";\nimport RandomlyMurmur3 from \"./murmur3.md\";\n\nexport default [\n    { component: RandomlyMurmur1, },\n    { component: RandomlyMurmur2, },\n    { component: RandomlyMurmur3, },\n]","import React, { useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport emoji from 'emoji-dictionary'\nimport { Button } from '@material-ui/core'\n\nimport posts from \"./mds\";\nimport './index.css'\nconst emojiSupport = text => text.value.replace(/:\\w+:/gi, name => emoji.getUnicode(name))\n\nfunction AngularArticles() {\n  const [md, setMd] = useState('')\n  const handleSelectArticle = () => {\n    const post = posts[Math.floor(Math.random() * Math.floor(posts.length))]\n    fetch(post.component).then(res => res.text()).then(text =>{\n      setMd(text)\n    })\n  }\n\n  return (\n    <>\n      <div className=\"randomly-murmur\">\n        <Button \n          className=\"randomly-click\"\n          variant=\"contained\" \n          size=\"large\" \n          color=\"primary\" \n          onClick={handleSelectArticle}>\n            Click me to see random post\n        </Button>\n        <ReactMarkdown source={md} renderers={{ text: emojiSupport }} />\n      </div>\n    </>\n  );\n}\n\nexport default AngularArticles;","import React from 'react'\nimport Gist from 'react-gist'\n\nfunction DeleteTag() {\n    return (\n        <Gist id=\"fd0a629902987042f0e9c95daff6208d\" file=\"delete-tag\"></Gist>\n    );\n}\n\nexport default DeleteTag;","import CreateTag from \"./create-tag\";\nimport DeleteTag from \"./delete-tag\";\n\nexport default [\n    { component: DeleteTag, title: 'Delete Tag', path: 'delete-tag' },\n    { component: CreateTag, title: 'Create Tag', path: 'create-tag' },\n]","import React from 'react'\nimport Gist from 'react-gist'\n\nfunction CreateTag() {\n    return (\n        <Gist id=\"fd0a629902987042f0e9c95daff6208d\" file=\"create-tag\"></Gist>\n    );\n}\n\nexport default CreateTag;","import React, { useState } from 'react'\nimport * as Posts from \"./posts\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\n\nfunction Gits() {\n  const [Post, setPost] = useState(null)\n\n  const handleGistRender = (c) => {\n    setPost(c())\n  }\n  return (\n    <>\n      <div className=\"git-posts\">\n        {Posts.default.map(a =>\n          <Link\n            onClick={() => handleGistRender(a.component)}\n            key={a.path}\n            to={`/git/${a.path}`}>\n            <Button variant=\"contained\" size=\"large\" color=\"primary\">{a.title}</Button>\n          </Link>)}\n      </div>\n\n      {Post}\n\n      {/* <Switch>\n        {Posts.default.map(a =>\n          <Route path={`/gist/${a.path}`} key={a.path}>\n            <a.component />\n          </Route>\n        )}\n      </Switch> */}\n    </>\n  );\n}\n\nexport default Gits;","import React from 'react';\nimport './App.css';\nimport RandomlyMurMur from './articles/randomly-murmur'\nimport Git from './articles/git'\nimport { Switch, Route, NavLink } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\n\nfunction App() {\n  return (\n    <div className=\"tech-articles\">\n      <div className=\"article-category\">\n        <NavLink to=\"/randomlymurmur\" activeClassName=\"current-category\">\n          <Button size=\"large\">Randomly MurMur</Button>\n        </NavLink>\n        <NavLink to=\"/git\" activeClassName=\"current-category\">\n          <Button size=\"large\">Git</Button>\n        </NavLink>\n      </div>\n\n      <Switch>\n        <Route path=\"/randomlymurmur\">\n          <RandomlyMurMur />\n        </Route>\n        <Route path=\"/git\">\n          <Git />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('tech-article-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/murmur1.c1e4c75a.md\";","module.exports = __webpack_public_path__ + \"static/media/murmur2.b0db7e42.md\";","module.exports = __webpack_public_path__ + \"static/media/murmur3.2020d910.md\";"],"sourceRoot":""}