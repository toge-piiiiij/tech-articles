{"version":3,"sources":["articles/randomly-murmur/mds/index.js","articles/randomly-murmur/index.js","components/PrismCode.js","components/InlineCode.js","articles/git/posts/remove.js","articles/git/posts/index.js","articles/git/posts/create-tag.js","articles/git/posts/delete-tag.js","articles/git/posts/remote-url.js","articles/git/posts/pull.js","articles/git/posts/cherry-pick.js","articles/git/posts/reset.js","articles/git/posts/rebase.js","articles/git/index.js","App.js","serviceWorker.js","index.js","articles/randomly-murmur/mds/murmur1.md","articles/randomly-murmur/mds/murmur2.md","articles/randomly-murmur/mds/murmur3.md"],"names":["component","RandomlyMurmur1","RandomlyMurmur2","RandomlyMurmur3","emojiSupport","text","value","replace","name","emoji","getUnicode","AngularArticles","useState","md","setMd","Helmet","className","Button","variant","size","color","onClick","post","posts","Math","floor","random","length","fetch","then","res","source","renderers","PrismCode","code","language","codeBlock","useRef","useEffect","highlight","Prism","highlightElement","current","ref","trim","InlineCode","children","Remove","gits","Typography","gutterBottom","title","path","useStyles","makeStyles","theme","root","display","gridTemplateColumns","boxShadow","marginTop","list","width","backgroundColor","palette","background","paper","height","overflowY","render","maxHeight","padding","Gits","Post","setPost","classes","src","integrity","crossorigin","List","Posts","map","a","ListItem","button","card","c","ListItemText","primary","App","to","activeClassName","Boolean","window","location","hostname","match","ReactDOM","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.cc2da241.chunk.js","sourcesContent":["import RandomlyMurmur1 from \"./murmur1.md\";\nimport RandomlyMurmur2 from \"./murmur2.md\";\nimport RandomlyMurmur3 from \"./murmur3.md\";\n\nexport default [\n    { component: RandomlyMurmur1, },\n    { component: RandomlyMurmur2, },\n    { component: RandomlyMurmur3, },\n]","import React, { useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Helmet } from \"react-helmet\";\nimport emoji from 'emoji-dictionary'\nimport { Button } from '@material-ui/core'\n\nimport posts from \"./mds\";\nimport './index.css'\nconst emojiSupport = text => text.value.replace(/:\\w+:/gi, name => emoji.getUnicode(name))\n\nfunction AngularArticles() {\n  const [md, setMd] = useState('')\n  const handleSelectArticle = () => {\n    const post = posts[Math.floor(Math.random() * Math.floor(posts.length))]\n    fetch(post.component).then(res => res.text()).then(text => {\n      setMd(text)\n    })\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>MurMuring .....</title>\n      </Helmet>\n      <div className=\"randomly-murmur\">\n        <Button\n          className=\"randomly-click\"\n          variant=\"contained\"\n          size=\"large\"\n          color=\"primary\"\n          onClick={handleSelectArticle}>\n          Click me to see random post\n        </Button>\n        <ReactMarkdown source={md} renderers={{ text: emojiSupport }} />\n      </div>\n    </>\n  );\n}\n\nexport default AngularArticles;","import React, { useRef, useEffect } from \"react\"\nimport Prism from \"prismjs\"\n\n\nfunction PrismCode({ code, language }) {\n    const codeBlock = useRef(null)\n\n    useEffect(() => {\n        highlight()\n    })\n\n    const highlight = () => {\n        Prism.highlightElement(codeBlock.current)\n    }\n    return (\n        <pre >\n            <code ref={codeBlock} className={`language-${language}`}>\n                {code.trim()}\n            </code>\n        </pre>\n    )\n}\nexport default PrismCode;","import React, { useRef, useEffect } from \"react\"\nimport Prism from \"prismjs\"\n\n\nfunction InlineCode({ language, children }) {\n    const codeBlock = useRef(null)\n\n    useEffect(() => {\n        highlight()\n    })\n\n    const highlight = () => {\n        Prism.highlightElement(codeBlock.current)\n    }\n    return (\n        <code ref={codeBlock} className={`language-${language}`}>\n            {children}\n        </code>\n    )\n}\nexport default InlineCode;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode';\n\n\nfunction Remove() {\n    const gits =\n        [\n            `# git rm = rm  + git add\n$ git rm [file]`,\n            '$ git rm -r [folder] ',\n            '$ git rm --cached [filename]',\n            '$ git rm -r --cached [folder]',\n            '$ git rm [file on staged]',\n            '$ git rm -f [file on staged]',\n            `$ git rm -r --cached dir/\n$ git sts\nD  dir/d.txt\n?? dir/\n$ git ac 'remove'\nOn branch master\nnothing to commit, working tree clean\n`,\n\n\n            `$ git rm -r dir/`,\n            `git rm -r --cached .`\n\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n                Remove file and let git know\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Remove folder and let git know\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                If file is new to .git and already be added to staged: <InlineCode>A</InlineCode> -&gt; <InlineCode>??</InlineCode>\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n                If file is already recognized by git: <InlineCode>M</InlineCode> -&gt; <InlineCode>D</InlineCode> & <InlineCode>??</InlineCode>\n            </Typography>\n            <PrismCode code={gits[2]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                edit the commit prior to committing.\n            </Typography>\n            <PrismCode code={gits[3]} language=\"sh\" />\n\n            <Typography variant=\"h5\" gutterBottom>Kind of confusing</Typography>\n\n            <Typography variant=\"body1\" gutterBottom>\n                We cannot remove the staged file whether the file is new or not. <b>This failed.</b>\n            </Typography>\n            <PrismCode code={gits[4]} language=\"sh\" />\n            <Typography variant=\"body1\" gutterBottom>\n                Or using <InlineCode>-f</InlineCode> will work for you!\n            </Typography>\n            <PrismCode code={gits[5]} language=\"sh\" />\n\n            <Typography variant=\"h5\" gutterBottom><InlineCode>--cached</InlineCode> on folder?</Typography>\n\n            <Typography variant=\"body1\" gutterBottom>\n                Delete the folder but you use <InlineCode>--cached</InlineCode> for keeping the file inside.<br></br>\n                That means do nothing. Here's the result:\n            </Typography>\n            <PrismCode code={gits[6]} language=\"sh\" />\n\n\n            <Typography variant=\"body1\" gutterBottom>\n                Delete directly, don't think too much lol\n            </Typography>\n            <PrismCode code={gits[7]} language=\"sh\" />\n\n\n            <Typography variant=\"h5\" gutterBottom><InlineCode>--cached</InlineCode> on file?</Typography>\n\n            <Typography variant=\"body1\" gutterBottom>\n                You modified files, and create files, then add all to staged and run this:\n            </Typography>\n            <PrismCode code={gits[8]} language=\"sh\" />\n\n\n\n            <Typography variant=\"body1\" gutterBottom>\n                It remove the files,<br></br>\n                New files go to untracked<br></br>\n                Existing files go to <InlineCode>D</InlineCode> and go to untracked<br></br>\n                All the changed was kept and you did in vain.\n            </Typography>\n        </div>\n    );\n}\n\nexport default Remove;","import CreateTag from \"./create-tag\";\nimport DeleteTag from \"./delete-tag\";\nimport RemoteUrl from \"./remote-url\";\nimport Pull from \"./pull\";\nimport CherryPick from \"./cherry-pick\";\nimport Rebase from \"./rebase\";\nimport Reset from \"./reset\";\nimport Remove from \"./remove\";\n\nexport default [\n    { component: CreateTag, title: 'Create Tag', path: 'create-tag' },\n    { component: DeleteTag, title: 'Delete Tag', path: 'delete-tag' },\n    { component: RemoteUrl, title: 'Remote Url', path: 'remote-url' },\n    { component: Pull, title: 'Pull', path: 'pull' },\n    { component: CherryPick, title: 'Cherry pick', path: 'cherry-pick' },\n    { component: Reset, title: 'Reset', path: 'reset' },\n    { component: Remove, title: 'Remove', path: 'remove' },\n    { component: Rebase, title: 'Rebase', path: 'rebase' },\n]","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode'\n\nfunction CreateTag() {\n    const gits = \n    [\n        '$ git tag temp-apple',\n        \n        `$ git cat-file -p temp-apple\\n\n# tree b2b161aefc2b86809ad8e2d7d16db45768ceda31\n# parent e20b06ad080192dbf775d980ca517365bdf197a9\n# author toge-piiiiij <jia0.togepiii@gmail.com> 1599195339 +0800\n# committer toge-piiiiij <jia0.togepiii@gmail.com> 1599195339 +0800`,\n        \n        `# same as git rev-parse HEAD\n$ git rev-parse temp-apple\n# 750d2b113551ef2d8de397687f34600a7918d84c`,\n        \n        `$ git tag second-temp-apple -a -m 'This is second tag with message`,\n        \n        `$ git cat-file -p second-temp-apple\n# object 750d2b113551ef2d8de397687f34600a7918d84c\n# type commit\n# tag second-temp-apple\n# tagger toge-piiiiij <jia0.togepiii@gmail.com> 1599279159 +0800\n\nThis is second tag with message`,\n        \n        `$ git rev-parse second-temp-apple\n1dbef0603debff29c5f2f3cce52a2605548dc85d`,\n\n    '$ git push --tags',\n    '$ git push origin temp-apple',\n\n    ]\n    return (\n        <div>\n        <Typography variant=\"h6\" gutterBottom>\n            Unannotated tag also normal & lightweight.\n        </Typography>\n        <PrismCode code={gits[0]} language=\"sh\" />\n\n        <Typography variant=\"body1\" gutterBottom>\n            see the result then. tree, [parent], author, committer\n        </Typography>\n        <PrismCode code={gits[1]} language=\"sh\" />\n\n        <Typography variant=\"body1\" gutterBottom>\n            get the real object, the real commit as you thought\n        </Typography>\n        <PrismCode code={gits[2]} language=\"sh\" />\n\n        <Typography variant=\"h6\" gutterBottom>\n            Annotated tag\n        </Typography>\n        <PrismCode code={gits[3]} language=\"sh\" />\n\n        <Typography variant=\"body1\">\n            result\n        </Typography>\n        <PrismCode code={gits[4]} language=\"sh\" />\n\n        <Typography variant=\"body1\">\n            It's real commit\n        </Typography>\n        <PrismCode code={gits[5]} language=\"sh\" />\n\n        <Typography variant=\"body1\" gutterBottom>\n            You can use <InlineCode>git show</InlineCode> for display annotated tag.\n        </Typography>\n        <Typography variant=\"body1\" gutterBottom>\n            Unannotated is a just pointer to the commit\n        </Typography>\n\n\n        <Typography variant=\"h1\" gutterBottom/>\n\n\n        <Typography variant=\"h6\" gutterBottom>\n        Finally you can push all tags to remote\n        </Typography>\n        <PrismCode code={gits[6]} language=\"sh\" />\n\n\n        <Typography variant=\"body1\" gutterBottom>\n            ...or push spec tag\n        </Typography>\n        <PrismCode code={gits[7]} language=\"sh\" />\n\n\n    </div>\n    );\n}\n\nexport default CreateTag;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\n\n\nfunction DeleteTag() {\n    const gits = \n        [\n            '$ git tag -d [tagName]', \n            `# All are the same\\n$ git push -d origin [tagName]\\n$ git push origin :[tagName]\\n$ git push origin :refs/tags/[tagName]\\n`\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n                Delete tag locally\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n            <Typography variant=\"body1\" gutterBottom>\n                Delete tag remotely\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n        </div>\n    );\n}\n\nexport default DeleteTag;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode';\n\n\nfunction RemoteUrl() {\n    const gits =\n        [\n            '$ git remote add jq https://github.com/jquery/jquery.git',\n\n            `$ git remote -v\\n\n# jq      https://github.com/jquery/jquery.git (fetch)\n# jq      https://github.com/jquery/jquery.git (push)\n# origin  https://github.com/[account]/[repo].git (fetch)\n# origin  https://github.com/[account]/[repo].git (push)`,\n\n            `$ git remote\\n$git remote rm jq\n# jq\n# origin`,\n\n            `$ git remote set-url origin [new repo]`,\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n                Add a new repo address for <InlineCode>origin</InlineCode>\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                List the connections\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                I don't need that anymore\n            </Typography>\n            <PrismCode code={gits[2]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Replace the address of <InlineCode>origin</InlineCode>\n            </Typography>\n            <PrismCode code={gits[3]} language=\"sh\" />\n\n        </div>\n    );\n}\n\nexport default RemoteUrl;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\n\n\nfunction Pull() {\n    const gits = \n        [\n            '$ git pull',\n            '$ git pull --rebase',\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n                Do fetch and merge, get news and digest it. \n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n            <Typography variant=\"body1\" gutterBottom>\n                merged commit <i>(unnecessary commits just for merging process)</i> excepted, merge all remote commits.\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n        </div>\n    );\n}\n\nexport default Pull;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode';\n\n\nfunction CherryPick() {\n    const gits =\n        [\n            '$ git cherry-pick [commit]',\n            `$ git cherry-pick [commit] -x`,\n            '$ git cherry-pick [commit] -e',\n            '$ git cherry-pick [commit] -n',\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n                Normally pick, keep message\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Note that commit is from somewhere.\n                So using <InlineCode>git log</InlineCode>, you're gotta see the <InlineCode>(cherry picked from commit [commitId]) after commit message</InlineCode>\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                edit the commit prior to committing.\n            </Typography>\n            <PrismCode code={gits[2]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Do not commit, just stage the changes.\n            </Typography>\n            <PrismCode code={gits[3]} language=\"sh\" />\n        </div>\n    );\n}\n\nexport default CherryPick;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode';\n\n\nfunction Reset() {\n    const gits =\n        [\n            `$ git reset HEAD^ --soft`,\n            `$ git reset HEAD^ --mixed`,\n            `$ git reset HEAD^ --hard`,\n            '$ git reset HEAD [file]',\n            '$ git reset HEAD^ --hard',\n            '$ git reset ORIG_HEAD --hard',\n            '$ git checkout HEAD [file]',\n        ]\n    return (\n        <div>\n            <Typography variant=\"h5\" gutterBottom>\n                Now let's suggest we want to status is back to last commit.\n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom>\n                Tear apart commit,<br></br>\n               Prev committed changes is still on staged<br></br>\n               Keep current status is still staged or untracked.\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Tear apart commit<br></br>\n               Prev committed changes is moved to untracked<br></br>\n               Keep current status is still staged or untracked.\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Tear apart commit<br></br>\n               Give up committed changes<br></br>\n               Give up current status which is staged, also the new files<br></br>\n               Untracked new files are still untracked.\n            </Typography>\n            <PrismCode code={gits[2]} language=\"sh\" />\n\n\n            <Typography variant=\"body1\" gutterBottom>\n                Spec file staged to be unstaged or untracked\n            </Typography>\n            <PrismCode code={gits[3]} language=\"sh\" />\n\n            <Typography variant=\"h5\" gutterBottom> Doing something dangerous</Typography>\n            <Typography variant=\"body1\" gutterBottom>\n                <InlineCode>ORIG_HEAD</InlineCode> will store the current sha. <b>Thanks GOD</b>\n            </Typography>\n            <PrismCode code={gits[4]} language=\"sh\" />\n\n\n            <Typography variant=\"body1\" gutterBottom>\n                If we regret, we can get back to the right way.\n            </Typography>\n            <PrismCode code={gits[5]} language=\"sh\" />\n\n\n            <Typography variant=\"h5\" gutterBottom>Trick</Typography>\n            <Typography variant=\"body1\" gutterBottom>\n                Only restore file whether it's staged or unstaged.\n            </Typography>\n            <PrismCode code={gits[6]} language=\"sh\" />\n        </div>\n    );\n}\n\nexport default Reset;","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport PrismCode from '../../../components/PrismCode'\nimport InlineCode from '../../../components/InlineCode';\n\n\nfunction Rebase() {\n    const gits =\n        [\n            `$ git rebase [commit] -i\\n\n# pick    : pure situation as you think\n# squash  : merge with prev but keep its message\n# fixup   : merge with prev but drop its message\n# drop    : dump it\n# edit    : breaking point here, \n            choose to edit commit message or do something then --continue\n# reword  : breaking point here, edit commit message\n# exec    : ?\\n`,\n            '$ git rebase [prevCommit] -i',\n            '$ git rebase --onto [to] [from]',\n\n`A -> B -> C1 -> D1 -> E1 -> F1(current branch)\n        |\n        C -> D -> E -> F`,\n\n            `$ git rebase --onto E C`,\n\n`A -> B -> C -> D -> E -> C1 -> D1 -> E1 -> F1\n                       |\n                       F`,\n        ]\n    return (\n        <div>\n            <Typography variant=\"body1\" gutterBottom>\n               Go to vim mode\n            </Typography>\n            <PrismCode code={gits[0]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Drop the current commit that you just mistakenly made! Make it <InlineCode>drop</InlineCode> and <InlineCode>:wq</InlineCode>\n            </Typography>\n            <PrismCode code={gits[1]} language=\"sh\" />\n\n            <Typography variant=\"body1\" gutterBottom>\n                Chop source as much as it can.\n            </Typography>\n            <PrismCode code={gits[2]} language=\"sh\" />\n\n            <Typography variant=\"h6\" gutterBottom>For example:</Typography>\n            <PrismCode code={gits[3]} language=\"?\" />\n            <Typography variant=\"body1\" gutterBottom>do</Typography>\n            <PrismCode code={gits[4]} language=\"?\" />\n            <Typography variant=\"body1\" gutterBottom>and it turns out:</Typography>\n            <PrismCode code={gits[5]} language=\"?\" />\n        </div>\n    );\n}\n\nexport default Rebase;","import React, { useState } from 'react'\nimport * as Posts from \"./posts\";\nimport { Helmet } from \"react-helmet\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: '1fr 4fr',\n    boxShadow: '1px 1px 4px 0px rgba(0,0,0,0.2)',\n    marginTop: '24px',\n  },\n  list: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    height: '70vh',\n    overflowY: 'scroll',\n    boxShadow: '1px 1px 4px 0px rgba(0,0,0,0.2)',\n  },\n  render: {\n    maxHeight: '70vh',\n    overflowY: 'scroll',\n    background: '#ffffff',\n    padding: '24px',\n  }\n}));\n\nfunction Gits() {\n  const [Post, setPost] = useState(null)\n  const classes = useStyles();\n  const handleGistRender = (c) => {\n    setPost(c())\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <Helmet>\n        <title>Git snippet</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.21.0/prism.min.js\" integrity=\"sha512-WkVkkoB31AoI9DAk6SEEEyacH9etQXKUov4JRRuM1Y681VsTq7jYgrRw06cbP6Io7kPsKx+tLFpH/HXZSZ2YEQ==\" crossorigin=\"anonymous\"></script>\n      </Helmet>\n      <List className={classes.list}>\n         {Posts.default.map(a =>\n          <ListItem\n            button\n            className={classes.card}\n            onClick={() => handleGistRender(a.component)}>\n            <ListItemText primary={a.title} />\n          </ListItem>\n        )}\n      </List>\n      <div className={classes.render}>\n        {Post}\n      </div>\n    </div>\n  );\n}\n\nexport default Gits;","import React from 'react';\nimport './App.css';\nimport RandomlyMurMur from './articles/randomly-murmur'\nimport Git from './articles/git'\nimport { Switch, Route, NavLink } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\n\nfunction App() {\n  return (\n    <div className=\"tech-articles\">\n      <div className=\"article-category\">\n        <NavLink to=\"/randomlymurmur\" activeClassName=\"current-category\">\n          <Button size=\"large\">Randomly MurMur</Button>\n        </NavLink>\n        <NavLink to=\"/git\" activeClassName=\"current-category\">\n          <Button size=\"large\">Git</Button>\n        </NavLink>\n      </div>\n\n      <Switch>\n        <Route path=\"/randomlymurmur\">\n          <RandomlyMurMur />\n        </Route>\n        <Route path=\"/git\">\n          <Git />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('tech-article-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/murmur1.230ff83d.md\";","module.exports = __webpack_public_path__ + \"static/media/murmur2.b0db7e42.md\";","module.exports = __webpack_public_path__ + \"static/media/murmur3.2020d910.md\";"],"sourceRoot":""}